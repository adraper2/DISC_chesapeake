sampled <- (sample(which(samp[x] == unique(training$plot.id)), 1))
while(sampled %in% samp.rows){
cat('oof sampled:', sampled, 'samp:', samp[x], 'pos:', x,'\n')
sampled <- (sample(which(samp[x] == training$plot.id), 1))
}
samp.rows[x] <- sampled
}
samp
table(samp)
View(training)
samp.rows
samp
(sample(which(723 == training$plot.id), 1))
(sample(which(723 == training$plot.id), 1))
(sample(which(723 == training$plot.id), 1))
(sample(which(723 == training$plot.id), 1))
(sample(which(723 == training$plot.id), 1))
(sample(which(723 == training$plot.id), 1))
(sample(which(723 == training$plot.id), 1))
(sample(which(723 == training$plot.id), 1))
(sample(which(723 == training$plot.id), 1))
(sample(which(723 == training$plot.id), 1))
samp[1]
samp.rows <- numeric(length(samp))
for (x in 1:length(samp)){
sampled <- (sample(which(samp[x] == training$plot.id), 1))
while(sampled %in% samp.rows){
cat('oof sampled:', sampled, 'samp:', samp[x], 'pos:', x,'\n')
sampled <- (sample(which(samp[x] == training$plot.id), 1))
}
samp.rows[x] <- sampled
}
samp.rows
which(0==samp.rows)
samp[140]
which(720==training$plot.id)
samp[4]
which(825==training$plot.id)
x in 1:length(samp)
1:length(samp)
for (x in 1:length(samp)){
cat(x)
#sampled <- (sample(which(samp[x] == training$plot.id), 1))
#while(sampled %in% samp.rows){
#cat('oof sampled:', sampled, 'samp:', samp[x], 'pos:', x,'\n')
#sampled <- (sample(which(samp[x] == training$plot.id), 1))
#}
#samp.rows[x] <- sampled
}
for (x in 1:length(samp)){
cat(x, '\n')
#sampled <- (sample(which(samp[x] == training$plot.id), 1))
#while(sampled %in% samp.rows){
#cat('oof sampled:', sampled, 'samp:', samp[x], 'pos:', x,'\n')
#sampled <- (sample(which(samp[x] == training$plot.id), 1))
#}
#samp.rows[x] <- sampled
}
for (x in 1:length(samp)){
cat(x, samp[x], '\n')
#sampled <- (sample(which(samp[x] == training$plot.id), 1))
#while(sampled %in% samp.rows){
#cat('oof sampled:', sampled, 'samp:', samp[x], 'pos:', x,'\n')
#sampled <- (sample(which(samp[x] == training$plot.id), 1))
#}
#samp.rows[x] <- sampled
}
for (x in 1:length(samp)){
cat(x, samp[x],which(samp[x] == training$plot.id), '\n')
#sampled <- (sample(which(samp[x] == training$plot.id), 1))
#while(sampled %in% samp.rows){
#cat('oof sampled:', sampled, 'samp:', samp[x], 'pos:', x,'\n')
#sampled <- (sample(which(samp[x] == training$plot.id), 1))
#}
#samp.rows[x] <- sampled
}
for (x in 1:length(samp)){
cat(x, samp[x], 'options', which(samp[x] == training$plot.id), 'result',sample(which(samp[x] == training$plot.id), 1), '\n')
#sampled <- (sample(which(samp[x] == training$plot.id), 1))
#while(sampled %in% samp.rows){
#cat('oof sampled:', sampled, 'samp:', samp[x], 'pos:', x,'\n')
#sampled <- (sample(which(samp[x] == training$plot.id), 1))
#}
#samp.rows[x] <- sampled
}
sample(which(samp[4] == training$plot.id), 1)
sample(which(samp[4] == training$plot.id), 1)
sample(which(samp[4] == training$plot.id), 1)
samp[4]
sample(which(825 == training$plot.id), 1)
sample(which(825 == training$plot.id), 1)
sample(which(825 == training$plot.id), 1)
sample(which(825 == training$plot.id), 1)
which(825 == training$plot.id)
which(825 == training$plot.id)
which(825 == training$plot.id)
which(825 == training$plot.id)
which(825 == training$plot.id)
sample(204, 1)
sample(204, 1)
sample(204, 1)
sample(which(as.vector(samp[4]) == training$plot.id), 1)
sample(which(as.vector(samp[4]) == training$plot.id), 1)
sample(which(as.vector(samp[4]) == training$plot.id), 1)
sample(which(as.vector(samp[4]) == training$plot.id), 1)
sample(which(vector(samp[4]) == training$plot.id), 1)
sample(which(c(samp[4]) == training$plot.id), 1)
sample(which(c(samp[4]) == training$plot.id), 1)
sample(10,1)
sample(10,1)
sample(10,1)
sample(c(10),1)
sample(as.vector(10),1)
which(samp[825] == training$plot.id)[1]
which(825 == training$plot.id)[1]
length(which(825 == training$plot.id))
rm(list=ls())
library(ggplot2)
library(randomForest)
library(gridExtra)
library(reprtree)
# To install the reprtree package off of GitHub (run once initially then recomment it out)
#options(repos='http://cran.rstudio.org')
#have.packages <- installed.packages()
#cran.packages <- c('devtools','plotrix','randomForest','tree')
#to.install <- setdiff(cran.packages, have.packages[,1])
#if(length(to.install)>0) install.packages(to.install)
#
#library(devtools)
#if(!('reprtree' %in% installed.packages())){
#  install_github('araastat/reprtree')
#}
#for(p in c(cran.packages, 'reprtree')) eval(substitute(library(pkg), list(pkg=p)))
setwd("~/Documents/Junior_Year/DISC_REU/DISC_chesapeake/")
load(file='training_set.rda')
### PARAMETER VARIABLES
curr.species = 'scam'
train.size = .8
cols.in.training = c(12:16,18:19)
seed.num = 2000
set.seed(seed.num)
current <- training[,which(names(training)==curr.species)]
#samp <- sample(nrow(training), train.size * nrow(training))
samp <- sample(unique(training$plot.id), round(train.size * length(unique(training$plot.id))), replace = FALSE)
# vector of rows to use (THERES A BUG HERE)
samp.rows <- numeric(length(samp))
for (x in 1:length(samp)){
#cat(x, samp[x], 'options', which(samp[x] == training$plot.id), 'result',sample(which(samp[x] == training$plot.id), 1), '\n')
if (length(which(samp[x] == training$plot.id)) == 1){ # catches bug if sample only has one option to pick from
sampled <- which(samp[x] == training$plot.id)[1]
} else { # otherwise sample randomly from the vector of rows available
sampled <- (sample(which(samp[x] == training$plot.id), 1))
while(sampled %in% samp.rows){ # if somehow this row is in our list already, print (this should never happen)
cat('oof sampled:', sampled, 'samp:', samp[x], 'pos:', x,'\n')
sampled <- (sample(which(samp[x] == training$plot.id), 1))
}
}
samp.rows[x] <- sampled
}
samp.rows
table9samp.rows)
table(samp.rows)
train <- droplevels(training[samp.rows,])
test <- droplevels(training[-samp.rows,])
model = randomForest(train[,which(names(training)==curr.species)] ~ .,data = train[,cols.in.training], keep.forest=TRUE)
model
rm(model)
set.seed(seed.num)
# get model accuracy over a number of trials
seed.range <- as.integer(sample(100:10000, 100))
sum.of.oob <- 0
for (x in seed.range){
set.seed(x)
current <- training[,which(names(training)==curr.species)]
samp <- sample(nrow(training), train.size * nrow(training))
train <- droplevels(training[samp,])
test <- droplevels(training[-samp,])
model = randomForest(train[,which(names(training)==curr.species)] ~ .,data = train[,cols.in.training], keep.forest=TRUE)
sum.of.oob = sum.of.oob + mean(model$err.rate[,1])
if (x != seed.range[100]){
rm(model)
}
}
avg.oob <- sum.of.oob/length(seed.range)
avg.oob
#par(bg = '#ecf0f8f9')
#plot(0, 0, type="n", ann=FALSE, axes=FALSE)
#u <- par("usr") # The coordinates of the plot area
#rect(u[1], u[3], u[2], u[4], col="white", border=NA)
#par(new=TRUE)
plot(model, main="", cex.main=2, cex.lab=1.4, cex.axis=1.4)
#par(bg = '#ecf0f8f9')
#plot(0, 0, type="n", ann=FALSE, axes=FALSE)
#u <- par("usr") # The coordinates of the plot area
#rect(u[1] + 0.07, u[3], u[2], u[4], col="white", border=NA)
#par(new=TRUE)
varImpPlot(model, main="", cex.main=2, cex.lab=1.4, cex.axis=1.4)
pred <- predict(model, newdata = test)
table(pred, test[,which(names(training)==curr.species)])
pred <- factor(pred, levels = c("0%", "less than 1%", "1 - 5%", "6% - 25%", "26 - 50%", "51 - 75%", "76% - 100%"))
cols = c("0%"="#ceb467", "less than 1%" = "#ace5b2", "1 - 5%" = "#7aef87", "6% - 25%" = "#57d165", "26 - 50%" = "#21a31d", "51 - 75%" = "#197f24", "76% - 100%" = "#115118")
pred.graph <- ggplot() +
geom_rect(data=test, aes(xmin=easting, xmax=easting + 30, ymin=northing, ymax=northing + 30, fill = as.factor(unlist(pred))), color="black") +
labs(title=paste(paste(curr.species,"Pop. Abundance Prediction on 40% of Plots")), x="Easting", y="Northing", fill="Cover") +
scale_x_continuous(limits = c(365430, 366280)) +
scale_y_continuous(limits = c(4303800, 4304470)) +
scale_fill_manual(values = cols)
pred.graph
pred2 <- predict(model, newdata = training)
table(pred2, training[,which(names(training)==curr.species)])
pred2 <- factor(pred2, levels = c("0%", "less than 1%", "1 - 5%", "6% - 25%", "26 - 50%", "51 - 75%", "76% - 100%"))
# red scale for Phrag
cols = c("0%"="#ceb467", "less than 1%" = "#fce0e0", "1 - 5%" = "#ffa8a8", "6% - 25%" = "#f26a6a", "26 - 50%" = "#e83e3e", "51 - 75%" = "#c12020", "76% - 100%" = "#891818")
pred2.graph <- ggplot() +
geom_rect(data=training, aes(xmin=easting, xmax=easting + 30, ymin=northing, ymax=northing + 30, fill = as.factor(unlist(pred2))), color="black") +
labs(title=paste(paste(curr.species, "Population Classifier Predictions")),x="Easting", y="Northing", fill="Cover") +
scale_x_continuous(limits = c(365430, 366280)) +
scale_y_continuous(limits = c(4303800, 4304470)) +
scale_fill_manual(values = cols) + theme(plot.background = element_rect(fill = 'white'),
axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank())
pred2.graph
rm(list=ls())
library(ggplot2)
library(randomForest)
library(gridExtra)
library(reprtree)
setwd("~/Documents/Junior_Year/DISC_REU/DISC_chesapeake/")
load(file='training_set.rda')
### PARAMETER VARIABLES
curr.species = 'scam'
train.size = .8
cols.in.training = c(12:16,18:19)
seed.num = 2000
set.seed(seed.num)
current <- training[,which(names(training)==curr.species)]
#samp <- sample(nrow(training), train.size * nrow(training))
samp <- sample(unique(training$plot.id), round(train.size * length(unique(training$plot.id))), replace = FALSE)
# vector of rows to use (THERES A BUG HERE)
samp.rows <- numeric(length(samp))
for (x in 1:length(samp)){
#cat(x, samp[x], 'options', which(samp[x] == training$plot.id), 'result',sample(which(samp[x] == training$plot.id), 1), '\n')
if (length(which(samp[x] == training$plot.id)) == 1){ # catches bug if sample only has one option to pick from
sampled <- which(samp[x] == training$plot.id)[1]
} else { # otherwise sample randomly from the vector of rows available
sampled <- (sample(which(samp[x] == training$plot.id), 1))
while(sampled %in% samp.rows){ # if somehow this row is in our list already, print (this should never happen)
cat('oof sampled:', sampled, 'samp:', samp[x], 'pos:', x,'\n')
sampled <- (sample(which(samp[x] == training$plot.id), 1))
}
}
samp.rows[x] <- sampled
}
train <- droplevels(training[samp.rows,])
test <- droplevels(training[-samp.rows,])
model = randomForest(train[,which(names(training)==curr.species)] ~ .,data = train[,cols.in.training], keep.forest=TRUE)
model
set.seed(seed.num)
# get model accuracy over a number of trials
seed.range <- as.integer(sample(100:10000, 100))
sum.of.oob <- 0
for (x in seed.range){
set.seed(x)
current <- training[,which(names(training)==curr.species)]
samp <- sample(nrow(training), train.size * nrow(training))
train <- droplevels(training[samp,])
test <- droplevels(training[-samp,])
model = randomForest(train[,which(names(training)==curr.species)] ~ .,data = train[,cols.in.training], keep.forest=TRUE)
sum.of.oob = sum.of.oob + mean(model$err.rate[,1])
if (x != seed.range[100]){
rm(model)
}
}
avg.oob <- sum.of.oob/length(seed.range)
avg.oob
#par(bg = '#ecf0f8f9')
#plot(0, 0, type="n", ann=FALSE, axes=FALSE)
#u <- par("usr") # The coordinates of the plot area
#rect(u[1], u[3], u[2], u[4], col="white", border=NA)
#par(new=TRUE)
plot(model, main="", cex.main=2, cex.lab=1.4, cex.axis=1.4)
rm(list=ls())
library(ggplot2)
library(randomForest)
library(gridExtra)
library(reprtree)
setwd("~/Documents/Junior_Year/DISC_REU/DISC_chesapeake/")
load(file='training_set.rda')
### PARAMETER VARIABLES
curr.species = 'scam'
train.size = .8
cols.in.training = c(12:16,18:19)
seed.num = 2000
set.seed(seed.num)
current <- training[,which(names(training)==curr.species)]
#samp <- sample(nrow(training), train.size * nrow(training))
samp <- sample(unique(training$plot.id), round(train.size * length(unique(training$plot.id))), replace = FALSE)
# vector of rows to use (THERES A BUG HERE)
samp.rows <- numeric(length(samp))
for (x in 1:length(samp)){
#cat(x, samp[x], 'options', which(samp[x] == training$plot.id), 'result',sample(which(samp[x] == training$plot.id), 1), '\n')
if (length(which(samp[x] == training$plot.id)) == 1){ # catches bug if sample only has one option to pick from
sampled <- which(samp[x] == training$plot.id)[1]
} else { # otherwise sample randomly from the vector of rows available
sampled <- (sample(which(samp[x] == training$plot.id), 1))
while(sampled %in% samp.rows){ # if somehow this row is in our list already, print (this should never happen)
cat('oof sampled:', sampled, 'samp:', samp[x], 'pos:', x,'\n')
sampled <- (sample(which(samp[x] == training$plot.id), 1))
}
}
samp.rows[x] <- sampled
}
train <- droplevels(training[samp.rows,])
test <- droplevels(training[-samp.rows,])
model = randomForest(train[,which(names(training)==curr.species)] ~ .,data = train[,cols.in.training], keep.forest=TRUE)
model
save(model, file=paste("Classifiers/",curr.species,"_model.rda",sep=""))
rm(list=ls())
library(ggplot2)
library(randomForest)
library(gridExtra)
library(reprtree)
# To install the reprtree package off of GitHub (run once initially then recomment it out)
#options(repos='http://cran.rstudio.org')
#have.packages <- installed.packages()
#cran.packages <- c('devtools','plotrix','randomForest','tree')
#to.install <- setdiff(cran.packages, have.packages[,1])
#if(length(to.install)>0) install.packages(to.install)
#
#library(devtools)
#if(!('reprtree' %in% installed.packages())){
#  install_github('araastat/reprtree')
#}
#for(p in c(cran.packages, 'reprtree')) eval(substitute(library(pkg), list(pkg=p)))
setwd("~/Documents/Junior_Year/DISC_REU/DISC_chesapeake/")
load(file='training_set.rda')
### PARAMETER VARIABLES
curr.species = 'phau'
train.size = .8
cols.in.training = c(12:16,18:19)
seed.num = 2000
set.seed(seed.num)
current <- training[,which(names(training)==curr.species)]
#samp <- sample(nrow(training), train.size * nrow(training))
samp <- sample(unique(training$plot.id), round(train.size * length(unique(training$plot.id))), replace = FALSE)
# vector of rows to use (THERES A BUG HERE)
samp.rows <- numeric(length(samp))
for (x in 1:length(samp)){
#cat(x, samp[x], 'options', which(samp[x] == training$plot.id), 'result',sample(which(samp[x] == training$plot.id), 1), '\n')
if (length(which(samp[x] == training$plot.id)) == 1){ # catches bug if sample only has one option to pick from
sampled <- which(samp[x] == training$plot.id)[1]
} else { # otherwise sample randomly from the vector of rows available
sampled <- (sample(which(samp[x] == training$plot.id), 1))
while(sampled %in% samp.rows){ # if somehow this row is in our list already, print (this should never happen)
cat('oof sampled:', sampled, 'samp:', samp[x], 'pos:', x,'\n')
sampled <- (sample(which(samp[x] == training$plot.id), 1))
}
}
samp.rows[x] <- sampled
}
train <- droplevels(training[samp.rows,])
test <- droplevels(training[-samp.rows,])
model = randomForest(train[,which(names(training)==curr.species)] ~ .,data = train[,cols.in.training], keep.forest=TRUE)
model
save(model, file=paste("Classifiers/",curr.species,"_model.rda",sep=""))
rm(list=ls())
library(ggplot2)
library(randomForest)
library(gridExtra)
library(reprtree)
# To install the reprtree package off of GitHub (run once initially then recomment it out)
#options(repos='http://cran.rstudio.org')
#have.packages <- installed.packages()
#cran.packages <- c('devtools','plotrix','randomForest','tree')
#to.install <- setdiff(cran.packages, have.packages[,1])
#if(length(to.install)>0) install.packages(to.install)
#
#library(devtools)
#if(!('reprtree' %in% installed.packages())){
#  install_github('araastat/reprtree')
#}
#for(p in c(cran.packages, 'reprtree')) eval(substitute(library(pkg), list(pkg=p)))
setwd("~/Documents/Junior_Year/DISC_REU/DISC_chesapeake/")
load(file='training_set.rda')
### PARAMETER VARIABLES
curr.species = 'phau'
train.size = .6
cols.in.training = c(12:16,18:19)
seed.num = 2000
set.seed(seed.num)
current <- training[,which(names(training)==curr.species)]
#samp <- sample(nrow(training), train.size * nrow(training))
samp <- sample(unique(training$plot.id), round(train.size * length(unique(training$plot.id))), replace = FALSE)
# vector of rows to use (THERES A BUG HERE)
samp.rows <- numeric(length(samp))
for (x in 1:length(samp)){
#cat(x, samp[x], 'options', which(samp[x] == training$plot.id), 'result',sample(which(samp[x] == training$plot.id), 1), '\n')
if (length(which(samp[x] == training$plot.id)) == 1){ # catches bug if sample only has one option to pick from
sampled <- which(samp[x] == training$plot.id)[1]
} else { # otherwise sample randomly from the vector of rows available
sampled <- (sample(which(samp[x] == training$plot.id), 1))
while(sampled %in% samp.rows){ # if somehow this row is in our list already, print (this should never happen)
cat('oof sampled:', sampled, 'samp:', samp[x], 'pos:', x,'\n')
sampled <- (sample(which(samp[x] == training$plot.id), 1))
}
}
samp.rows[x] <- sampled
}
train <- droplevels(training[samp.rows,])
test <- droplevels(training[-samp.rows,])
model = randomForest(train[,which(names(training)==curr.species)] ~ .,data = train[,cols.in.training], keep.forest=TRUE)
model
rm(list=ls())
library(ggplot2)
library(randomForest)
library(gridExtra)
library(reprtree)
# To install the reprtree package off of GitHub (run once initially then recomment it out)
#options(repos='http://cran.rstudio.org')
#have.packages <- installed.packages()
#cran.packages <- c('devtools','plotrix','randomForest','tree')
#to.install <- setdiff(cran.packages, have.packages[,1])
#if(length(to.install)>0) install.packages(to.install)
#
#library(devtools)
#if(!('reprtree' %in% installed.packages())){
#  install_github('araastat/reprtree')
#}
#for(p in c(cran.packages, 'reprtree')) eval(substitute(library(pkg), list(pkg=p)))
setwd("~/Documents/Junior_Year/DISC_REU/DISC_chesapeake/")
load(file='training_set.rda')
### PARAMETER VARIABLES
curr.species = 'phau'
train.size = .8
cols.in.training = c(12:16,18:19)
seed.num = 2000
set.seed(seed.num)
current <- training[,which(names(training)==curr.species)]
#samp <- sample(nrow(training), train.size * nrow(training))
samp <- sample(unique(training$plot.id), round(train.size * length(unique(training$plot.id))), replace = FALSE)
# vector of rows to use (THERES A BUG HERE)
samp.rows <- numeric(length(samp))
for (x in 1:length(samp)){
#cat(x, samp[x], 'options', which(samp[x] == training$plot.id), 'result',sample(which(samp[x] == training$plot.id), 1), '\n')
if (length(which(samp[x] == training$plot.id)) == 1){ # catches bug if sample only has one option to pick from
sampled <- which(samp[x] == training$plot.id)[1]
} else { # otherwise sample randomly from the vector of rows available
sampled <- (sample(which(samp[x] == training$plot.id), 1))
while(sampled %in% samp.rows){ # if somehow this row is in our list already, print (this should never happen)
cat('oof sampled:', sampled, 'samp:', samp[x], 'pos:', x,'\n')
sampled <- (sample(which(samp[x] == training$plot.id), 1))
}
}
samp.rows[x] <- sampled
}
train <- droplevels(training[samp.rows,])
test <- droplevels(training[-samp.rows,])
model = randomForest(train[,which(names(training)==curr.species)] ~ .,data = train[,cols.in.training], keep.forest=TRUE)
model
save(model, file=paste("Classifiers/",curr.species,"_model.rda",sep=""))
rm(list=ls())
library(ggplot2)
library(randomForest)
library(gridExtra)
library(reprtree)
# To install the reprtree package off of GitHub (run once initially then recomment it out)
#options(repos='http://cran.rstudio.org')
#have.packages <- installed.packages()
#cran.packages <- c('devtools','plotrix','randomForest','tree')
#to.install <- setdiff(cran.packages, have.packages[,1])
#if(length(to.install)>0) install.packages(to.install)
#
#library(devtools)
#if(!('reprtree' %in% installed.packages())){
#  install_github('araastat/reprtree')
#}
#for(p in c(cran.packages, 'reprtree')) eval(substitute(library(pkg), list(pkg=p)))
setwd("~/Documents/Junior_Year/DISC_REU/DISC_chesapeake/")
load(file='training_set.rda')
### PARAMETER VARIABLES
curr.species = 'c4'
train.size = .8
cols.in.training = c(12:16,18:19)
seed.num = 2000
set.seed(seed.num)
current <- training[,which(names(training)==curr.species)]
#samp <- sample(nrow(training), train.size * nrow(training))
samp <- sample(unique(training$plot.id), round(train.size * length(unique(training$plot.id))), replace = FALSE)
# vector of rows to use (THERES A BUG HERE)
samp.rows <- numeric(length(samp))
for (x in 1:length(samp)){
#cat(x, samp[x], 'options', which(samp[x] == training$plot.id), 'result',sample(which(samp[x] == training$plot.id), 1), '\n')
if (length(which(samp[x] == training$plot.id)) == 1){ # catches bug if sample only has one option to pick from
sampled <- which(samp[x] == training$plot.id)[1]
} else { # otherwise sample randomly from the vector of rows available
sampled <- (sample(which(samp[x] == training$plot.id), 1))
while(sampled %in% samp.rows){ # if somehow this row is in our list already, print (this should never happen)
cat('oof sampled:', sampled, 'samp:', samp[x], 'pos:', x,'\n')
sampled <- (sample(which(samp[x] == training$plot.id), 1))
}
}
samp.rows[x] <- sampled
}
train <- droplevels(training[samp.rows,])
test <- droplevels(training[-samp.rows,])
model = randomForest(train[,which(names(training)==curr.species)] ~ .,data = train[,cols.in.training], keep.forest=TRUE)
model
save(model, file=paste("Classifiers/",curr.species,"_model.rda",sep=""))
